 * 이진 값
0과 1


 * 비트
이진 값의 각 자리


 * 바이트
8개의 비트


 * 워드
메모리에서 읽히는 단위


 * 비트열
0과 1의 비트가 연속되는 것

비트열 표기는 16진수로 많이 한다
16진수 숫자 하나를 2진수 4자리로 표현하기 때문

ex)
0x49F = 0100 1001 1111


 * 비트 단위 연산자
 1. 논리 연산자
  (1) ~ : 비트 단위 보수
  (2) & : 비트 단위 논리곱
  (3) ^ : 비트 단위 배타적 논리합
  (4) | : 비트 단위 논리합
 2. 이동 연산자
  (1) << : 왼쪽 이동
  (2) >> : 오른쪽 이동

정수 수식에만 사용 ㄱㄴ

시스템 종속적


 * 부호 비트
 1. 양수 : 0
 2. 음수 : 1


 * 마스킹 연산
& 연산자를 사용하여
주어진 비트열의 특정 비트를 0으로 만드는 것

 마스크
마스킹 연산을 위해 사용되는 상수나 변수
1000 0000 0000 ... 이런 식으로 돼 있다
1 선언 후 1<<(n-1)로 설정


 * 왼쪽 이동 연산자 <<

2의 거듭제곱 효과
n<<k면 x(2^k)

빈 자리는 0으로 채움


 * 오른쪽 이동 연산자 >>

n>>k면 n/(2^k) 효과
나머지는 버림

 1. unsigned형이면 빈 자리가 0으로 채워짐
 2. signed형이면 빈 자리를 시스템 종속적으로 채워짐


 * 이동 연산자 주의점
부호비트와 관련된 빈 자리는 시스템 종속적으로 채워짐
부호비트와 관련 없으면 빈 자리는 0으로 채워짐

n<<k, n>>k에서
 1. k는 음수면 안 되고
 2. k는 n 비트 수 이상이면 안 된다


 * 비트열 출력 프로그램
 1. 자리수 체크
 2. 마스크 변수 설정
 3. 변수와 마스크 비교

int a;
scanf("%d", &a);
int n = sizeof(int) * 8; // 출력할 변수가 int형이고 32비트 운영체제이므로
int mask = 1<<(n-1);

for (int i = 0; i <=n; ++i) {
	putchar(((a&mask)==0) ? '0' : '1');
	a<<=1;

	if (i%8 == 0 && i < n)
		putchar(' ');
	}


 * putchar()
문자 하나만 출력

ex) putchar('a');


 * getchar()
버퍼 가장 앞에 있는 데이터 반환

ex) char c = getchar();


 * 패킹
여러 정보를 적은 바이트로 압축하는 것
비트 단위 연산자 사용

메모리 절약 ㄱㄴ
전송 시간 줄임


 * 언패킹
패킹된 정보를 사용하기 전에 정보를 추출하는 것


 * 패킹 & 언패킹

패킹
 1. 비트열 영역 지정
 2. 비트열이 다 0인 변수
 3. 저장은 or 연산으로
 4. 다음 저장은 비트 이동 << 필요

unsigned employee = 0;
employee |= id_no;
employee |= job_type << 20;
employee |= ((gender == 'm' || gender == 'M') ? 0 : 1) << 28;
return employee;

언패킹
 1. 해석 내용을 저장할 변수 선언
 2. 저장은 and 연산으로
 3. 비교는 0xFFF...
 4. 다음 비트 이동은 >> 사용

unsigned id_no, job_type;
char gender;
id_no = employee & 0xFFFFF;
job_type = (employee >> 20) & 0xFF;
gender = (employee >> 28) & 1;


 * 비트 필드
구조체 or 궁용체에서
정수형의 멤버에 비트 수(폭)을 지정하는 것

폭은 정수형 상수 수식 사용

최대 값은 멤버 변수의 비트 수와 같음

ex) unsigned id_no : 20;

컴파일러는 멤버들을 최소의 공간으로 패킹
워드 경계에 걸치치 않게 저장한다
ex)
struct employee {
	unsigned id_no : 20;
	unsigned job_type : 8;
	unsigned gender : 1;
};
이 경우 struct employee는 4byte에 저장
so, 비트 필드는 sizeof() 사용이 좋음

ex)
struct abc {
	int a : 1, b : 16, c : 16;
} x;
a와 b는 첫 번째 워드에 할당
c는 두 번째 워드에 할당
a와 b는 첫 워드 안에 들어가지만 c는 첫 워드에서 안 들어가므로


 * 비트 필드 사용 주의점
 1. unsigend int형 비트 필드 사용이 가급적 좋음
 2. 비트 필드 배열은 ㅂㄱㄴ
 3. 비트 필드에 주소 연산자 & 사용 ㅂㄱㄴ
 4. 포인터가 비트 필드를 포인트할 수 없음


 * 이름 없는 비트필드
명시한 만큼의 비트는 비우고 다음에 저장하라

변수 선언 없이 : 사용
ex) unsigned i1 : 7, i2 : 7, i3 :7, : 11, is : 7;
이 경우 i3 이후에는 11개를 그냥 비워두고 다음 워드에 저장


 * 폭이 0인 비트 필드
남은 비트 다 비우기 (워드 단위로)

변수 선언 없이 : 0 사용
ex) unsigned a : 1, : 0, b : 1, : 0, c : 1;
이러면 a는 1bit, 31bit는 비우고 b는 1bit, 31bit는 비우고, c는 1bit


#include <stdio.h>

typedef struct {
	unsigned b0 : 8, b1 : 8, b2 : 8, b3 : 8;
} word_bytes;

typedef struct {
	unsigned
		b0 : 1, b1 : 1, b2 : 1, b3 : 1, b4 : 1, b5 : 1,
		b6 : 1, b7 : 1, b8 : 1, b9 : 1, b10 : 1, b11 : 1,
		b12 : 1, b13 : 1, b14 : 1, b15 : 1, b16 : 1, b17 : 1,
		b18 : 1, b19 : 1, b20 : 1, b21 : 1, b22 : 1, b23 : 1,
		b24 : 1, b25 : 1, b26 : 1, b27 : 1, b28 : 1, b29 : 1,
		b30 : 1, b31 : 1;
} word_bits;

typedef union {
	int i;
	word_bytes byte;
	word_bits bit;
} word;

void bit_print(int a) {
	int i;
	int n = sizeof(int) * 8;
	int mask = 1 << (n-1);

	for (i = 1; i <= n; ++i) {
		putchar(((a & mask) == 0) ? '0' : '1');
		a <<= 1;

		if (i%8 == 0 && i < n)
			putchar(' ');
	}
}

int main() {
	word w ={0};
	w.bit.b8 = 1;
	w.byte.b0 = 'a';

	printf("w.i = %d\n", w.i);
	bit_print(w.i);

	return 0;
}

