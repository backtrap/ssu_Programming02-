 * 사용자 정의형
사용자가 직접 정의하는 데이터 자료형

 1. 구조체
 2. 공용체
 3. 열거형


 * 구조체
서로 다른 형의 변수들을 하나로 묶어줌

구성 요소
 1. struct
 2. 구조체 태그 이름
 3. 구조체 멤버

 struct
구조체 선언을 위한 키워드

구조체 선언
ex)
struct name_grade {
	char name[10];
	int grade;
};

구조체 변수 선언
struct 구조체명 구조체변수명;
ex) struct name_grade st_g1, st_g2;

구조체 멤버 접근 연산자 .
ex) 
st_g1.name
strcpy(st_g1.name, "이순신");
이 때, st_g1.name = "이순신";은 ㅂㄱㄴ. 배열명은 상수 포인터이기 때문에


 * 구조체 변수 선언

 1. 일반 선언
struct name_grade {
	char name[10];
	int grade;
};

 2. 구조체 형 선언과 동시에 변수 선언
struct name_grade {
...
} st_g3;

 3. 구조체 태그가 없는 선언
struct {
...
} st_g5;
ㄴ 일회용 선언
ㄴ 같은 방식으로 st_g5와 st_g6를 선언했다고 하더라도 둘은 다른 자료형

 4. typedef 사용 1
typedef struct name_grade {
...
} name_grade;

 5. typedef 사용 2
typedef struct {
...
} name_grade;


 * 구조체 변수 크기
타이트하게 딱 크기가 정해지지 x
빈 공간이 있다 (패딩, padding)
so, sizeof()를 쓰는 게 가장 좋음

기준은 멤버 중 가장 큰 자료형의 크기로 함

멤버 변수 선언 순서에 따라 구조체의 크기가 달라짐

멤버 변수 선언 순서가 int, double, char이면
-> 24byte

멤버 변수 선언 순서가 char, int면
-> 8byte

멤버 변수 선언 순서가 char, int, char이면
-> 12byte

멤버 변수 선언 순서가 char, char, int면
-> 8byte

멤버 변수 선언 순서가 char, double이면
-> 16byte


 * typedef
변수명 줄이기

typedef 변수명 별명;

ex) typedef strcut name_grade name_grade;

ex)
typedef struct {
...
} name_grade;


 * 구조체 초기화
멤버 순서대로 초기화된다

ex)
struct name_grade st_g10 = {"둘리", 89};

ex)
struct name_grade st_g11 = {"둘리"};

멤버 지정 연산자 .을 통해서 초기화 가능
ex) struct name_grade st_g12 = {.grade = 100};


 * 복합 리터럴
캐스트를 사용하여 형 지정

구조체 멤버의 값 배정에 유용

ex) st_g1 = (struct name_grade){"이순신", 98};

ex) st_g1 = (struct name_grade){.grade = 90, .name = "홍길동"};

메모리를 할당받으므로 주소값이 있다


구조체 멤버로 구조체가 올 수 있다


구조체 멤버의 문자열 배열은 초기화할 때 값을 넣을 수 있다


 * 구조체 포인터
접근 방법은
 1. (*ptr).member
 2. ptr->member

멈버 접근 연산자 ->



 * 구조체 배열
일반 배열과 같은 방법으로 선언하고 사용

ex)
struct name_grade st_a[5];

구조체 배열 초기화는 다중 중괄호 사용
ex) struct name_grade st_a[5] = {{"하나", 77}, {"둘", 87}, {"셋", 65}, {"넷", 90}, {"다섯", 98}};

구조체 배열 지정 초기화
 1. 인덱스 지정
 ex) struct name_grade st_a[5] = {[1] = {"둘", 87}};

 2. 인덱스.멤버 지정
 ex) struct name_grade st_a[5] = {[1].grade = 87, [1].name ="둘"};


 * 구조체 매개변수
기본은 값에 의한 전달

구조체를 리턴하는 방법도 있다

구조체는 멤버 수가 많으므로 용량이 커서
함수의 인자로 구조체의 주소 사용


 * 공용체
구조체와 비슷한 구문 형식이지만
멤버들이 같은 기억 장소를 공유함

 공용체 선언
union 공용체명 { ... };
ex)
union short_or_float {
	short s;
	float f;
};

공용체 구성 요소
 1. 키워드는 union
 2. 공용체 태그 이름
 3. 공용체 멤버

공용체는 멤버를 동시에 사용할 수 없다
상황에 따라서 하나만 사용한다

공용체 변수 선언
ex) union short_or_float a, b, c;

공용체 멤버 접근 방법
ex) a.s = 10

공용체는 구조체의 멤버로 주로 사용된다


 *공용체 멤버 공유
멤버들은 같은 저장 장소를 공유한다

멤버가 float, short일 때
float을 저장한다고 치자
그럼 공용 저장 장소에 float 자료형 방식으로 저장된다
그렇다고 해서 short의 멤버로 접근을 못 하는 건 아니다
같은 저장 장소에 있으므로 float 방식으로 저장한 데이터를 short 방식으로 해석해서 출력할 수 있다


* 열거형
숫자 대신 단어를 사용할 수 있게 함

enum 열거형명 {열거자};

구성은
 1. 키워드 enum
 2. 태그 이름
 3. 열거자

ex) enum day { SUN, MON, TUE, WED, THU, FRI, SAT };

열거자는 정수처럼 사용된다

열거자의 값은 디폴트로 첫 번째 원소가 0
그 후로는 +1

열거자 초기화 지정
ex) 
enum month { Jan=1, Feb, Mar, ...};
enum fruit {apple = 7, pear, orange = 3, lemon};

열거형 변수 선언
ex) enum day d1, d2;

열거형 선언과 함께 변수 선언
ex) enum day { SUN, MON, TUE, WED, THU, FRI, SAT } d1, d2;

열거형 태그 이름 생략
ex) enum { ... } d1, d2;

 익명 공용체
구조체 안의 이름 없는 공용체 (태그명 없는)

익명 구조체도 있다


typedef 함수포인터형
ex) typedef int (*func)(void)
func = main


 * bool형
<stdlib.h>에 있음
_Bool형을 간편화

 1. true
 2. false


 * time(NULL)
1970년 1월 1일부터 흐른 시간 (초 단위)

<time.h>에 있다

ex)
time_t now = time(NULL);
int today = (now/(60*60*24) + 4) % 7;