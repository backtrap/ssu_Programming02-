#01

출력 내용 : 
Goodbye!

출력 이유 : 
make은이 종속 트리를 만든 다음 파일이 만들어진 시간을 비교하여 명령을 실행하기 때문이다. hello와 date, list의 수정이 없으므로 각각에 대한 명령을 실행하지 않고 종속트리에서 가장 위에 있는 go에 관한 명령만 실행한다. 따라서 @echo Goodbye!만 실행하므로 Makefile의 출력 결과는 Goodbye!다.

@ 문자를 삭제했을 때의 출력 내용 :
echo Goodbye!
Goodbye!

@ 문자를 삭제했을 때의 출력 이유 :
원래 make가 Makefile에 명시된 명령을 실행할 때 실행하는 명령이 화면이 출력되기 때문에 명령어와 명령어의 결과가 출력된다. @ 문자는 실행되는 명령을 화면에 출력하지 않을 때 사용한다.


#02

출력 내용 :
make: *** No rule to make target 'Al', needed by 'Start'. Stop.

출력 이유 :
Start를 실행하기 위해서는 Al과 A2에 대한 규칙이 있어야 되는데 Makefile에는 Al에 대한 규칙이 없기 때문이다.

Al을 A1으로 수정할 경우의 출력 내용 : 
A3
A1
A2
Start

Al을 A1으로 수정할 경우의 출력 이유 : 
: 기호를 이용해서 Start와 A1, A2가 연관되어 있고 A1과 A3이 연관되어 있으고 A2와 A3이 연관되어 있다고 명시되어 있기 때문이다. 따라서 Start 관련 명령을 수행하기 위해서 A1과 A2에 관련된 명령어를 수행해야하고, A1과 관련된 명령을 수행하기 위해서 A3과 관련된 명령어를 수행해야 된다. 한편 A2에 관련된 명령어를 수행하기 위해서 A3과 관련된 명령어를 수행할 필요가 없다. A3에 변화가 없기 때문이다. 
따라서 make은 A3과 관련된 명령어를 우선 수행하고 A1과 관련된 명령어를 수행한다. 그 후에 A2와 관련된 명령어를 수행하고 Start와 관련된 명령어를 수행한다.


#03

컴파일 및 실행 과정 :
fibonacci_r.c를 만들어서 주어진 코드를 입력한다.
그리고 fibonacci_r.c에 main()을 만들어 fibonacci_r(43)을 입력한다.
gcc -pg -o fibonacci_r fibonacci_r.c를 입력하여 fibonacci_r를 만든다.
gcc -g -o fibonacci_r fibonacci_r.c를 입력하여 fibonacci_r를 만든다.
gdb fibonacci_r를 입력하여 실행한다.
(gdb) run을 통해 실행한다.
(gdb) break을 통해 검사점을 설정한다. 검사점은 main으로 설정한다. (gdb) break main
(gdb) backtrace를 통해 함수 호출 관계를 본다. 재귀 호출횟수를 확인한다.

fibonacci_r() 함수 호출 수 : 
2269806339
